import os
import csv
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SHEET_ID  = os.getenv("SHEET_ID")

if not BOT_TOKEN or not SHEET_ID:
    raise RuntimeError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ BOT_TOKEN –∏ SHEET_ID –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

API_CSV_URL = f"https://docs.google.com/spreadsheets/d/{SHEET_ID}/export?format=csv"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–π
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üè† –ü–æ–∫—É–ø–∫–∞"), KeyboardButton(text="üè¢ –ê—Ä–µ–Ω–¥–∞")],
        [KeyboardButton(text="üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")]
    ],
    resize_keyboard=True
)

@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    user_data[message.from_user.id] = {}
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ Tropical Horizon. –ß–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å?",
        reply_markup=main_kb
    )

@dp.message()
async def handle_all(message: types.Message):
    uid = message.from_user.id
    text = message.text.strip().lower()

    # –ï—Å–ª–∏ —Ü–µ–ª—å –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
    if "—Ü–µ–ª—å" not in user_data[uid]:
        mapping = {
            "üè† –ø–æ–∫—É–ø–∫–∞": "–ü–æ–∫—É–ø–∫–∞",
            "üè¢ –∞—Ä–µ–Ω–¥–∞": "–ê—Ä–µ–Ω–¥–∞",
            "üí∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
        }
        if text in mapping:
            user_data[uid]["—Ü–µ–ª—å"] = mapping[text]
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=main_kb)
        return

    # –ï—Å–ª–∏ –∏–º—è –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ
    if "–∏–º—è" not in user_data[uid]:
        user_data[uid]["–∏–º—è"] = message.text.strip()
        await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return

    # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω
    if "—Ç–µ–ª–µ—Ñ–æ–Ω" not in user_data[uid]:
        user_data[uid]["—Ç–µ–ª–µ—Ñ–æ–Ω"] = message.text.strip()
        await message.answer("–°—É–ø–µ—Ä! –°–µ–π—á–∞—Å –ø—Ä–∏—à–ª—é –≤–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        await send_offers(message)
        return

async def send_offers(message: types.Message):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º CSV –∏–∑ Google Sheets
    async with aiohttp.ClientSession() as session:
        async with session.get(API_CSV_URL) as resp:
            content = await resp.text()

    reader = csv.DictReader(content.splitlines())
    lines = []
    for row in reader:
        lines.append(
            f"üîπ <b>{row['name']} ({row['type']})</b>\n"
            f"–¶–µ–Ω–∞: {row['price']}\n"
            f"{row['description']}\n"
            f"<a href=\"{row['link']}\">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"
        )
    text = "\n".join(lines) or "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤."
    await message.answer(text, parse_mode="HTML", disable_web_page_preview=False)
    await message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –ø–∏—à–∏—Ç–µ @Usdtbulls")

if __name__ == "__main__":
    dp.run_polling(bot)
